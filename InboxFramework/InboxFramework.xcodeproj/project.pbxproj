// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		2B1BB2A864104F519B880280 /* libPods.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 1D6AA3EAE06C40EDB2393D2E /* libPods.a */; };
		3C5C8D7CD9254C4A8A59C2A1 /* libPods-InboxTests.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 6FC5C0E723F64C9CBF7CB02E /* libPods-InboxTests.a */; };
		430E98301930101E0078F430 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 43FF122E191AF2E70043E2E6 /* Foundation.framework */; };
		430E98361930101F0078F430 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 430E98341930101F0078F430 /* InfoPlist.strings */; };
		430E983E193010450078F430 /* Inbox.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A9684C191C08F300F24844 /* Inbox.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E983F193010520078F430 /* INAPIManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2B8191C049A00EF660E /* INAPIManager.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9840193010540078F430 /* INDatabaseManager.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2BC191C049A00EF660E /* INDatabaseManager.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9841193010560078F430 /* INSyncEngine.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BE9FE1926C8A400E5C67D /* INSyncEngine.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9842193010580078F430 /* INAPITask.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2C0191C049A00EF660E /* INAPITask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E98431930105A0078F430 /* INSaveDraftTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 435764F719269E3900E6B340 /* INSaveDraftTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E98441930105C0078F430 /* INAPIManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2B9191C049A00EF660E /* INAPIManager.m */; };
		430E98451930105E0078F430 /* INDatabaseManager.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2BD191C049A00EF660E /* INDatabaseManager.m */; };
		430E9846193010600078F430 /* INAPITask.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2C1191C049A00EF660E /* INAPITask.m */; };
		430E9847193010620078F430 /* INSaveDraftTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 435764F819269E3900E6B340 /* INSaveDraftTask.m */; };
		430E9848193010640078F430 /* INDeleteDraftTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 438BEA1C192BC8CC00E5C67D /* INDeleteDraftTask.m */; };
		430E984A193010730078F430 /* INAddRemoveTagsTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 435764F419269E2B00E6B340 /* INAddRemoveTagsTask.m */; };
		430E984B193010740078F430 /* INUploadAttachmentTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 43ADE9FD192D56A30048272B /* INUploadAttachmentTask.m */; };
		430E984C193010750078F430 /* INArchiveThreadTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 438BEA24192C364100E5C67D /* INArchiveThreadTask.m */; };
		430E984D1930107D0078F430 /* INUnarchiveThreadTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A14743192C447A001AF02F /* INUnarchiveThreadTask.m */; };
		430E984E1930107E0078F430 /* INSendDraftTask.m in Sources */ = {isa = PBXBuildFile; fileRef = 438BEA20192C35C900E5C67D /* INSendDraftTask.m */; };
		430E984F1930107F0078F430 /* INModelObject.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2D4191C049A00EF660E /* INModelObject.m */; };
		430E9850193010810078F430 /* INModelObject+Uniquing.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2D2191C049A00EF660E /* INModelObject+Uniquing.m */; };
		430E9851193010850078F430 /* INModelProvider.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2D7191C049A00EF660E /* INModelProvider.m */; };
		430E9852193010860078F430 /* INMessageProvider.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2D0191C049A00EF660E /* INMessageProvider.m */; };
		430E9853193010880078F430 /* INContact.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2C6191C049A00EF660E /* INContact.m */; };
		430E9854193010890078F430 /* INTag.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2C8191C049A00EF660E /* INTag.m */; };
		430E98551930108A0078F430 /* INMessage.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2CA191C049A00EF660E /* INMessage.m */; };
		430E98561930108B0078F430 /* INDraft.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A14747192E75B7001AF02F /* INDraft.m */; };
		430E98571930108C0078F430 /* INAttachment.m in Sources */ = {isa = PBXBuildFile; fileRef = 43ADEA05192D58160048272B /* INAttachment.m */; };
		430E98581930108D0078F430 /* INNamespace.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2CC191C049A00EF660E /* INNamespace.m */; };
		430E98591930108E0078F430 /* INThread.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2CE191C049A00EF660E /* INThread.m */; };
		430E985A193010930078F430 /* INThread+Private.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1474B192E7E1E001AF02F /* INThread+Private.m */; };
		430E985B193010950078F430 /* FMDatabase+INModelQueries.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2A2191C049A00EF660E /* FMDatabase+INModelQueries.m */; };
		430E985C193010960078F430 /* FMResultSet+INModelQueries.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2A4191C049A00EF660E /* FMResultSet+INModelQueries.m */; };
		430E985D193010970078F430 /* NSDictionary+FormatConversion.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2A8191C049A00EF660E /* NSDictionary+FormatConversion.m */; };
		430E985E193010980078F430 /* NSObject+AssociatedObjects.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2AA191C049A00EF660E /* NSObject+AssociatedObjects.m */; };
		430E985F193010990078F430 /* NSObject+Properties.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2AC191C049A00EF660E /* NSObject+Properties.m */; };
		430E98601930109A0078F430 /* NSPredicate+Inspection.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2AE191C049A00EF660E /* NSPredicate+Inspection.m */; };
		430E98611930109B0078F430 /* NSString+FormatConversion.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2B0191C049A00EF660E /* NSString+FormatConversion.m */; };
		430E98621930109D0078F430 /* INModelResponseSerializer.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2B3191C049A00EF660E /* INModelResponseSerializer.m */; };
		430E98631930109E0078F430 /* INPredicateToQueryParamConverter.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2B5191C049A00EF660E /* INPredicateToQueryParamConverter.m */; };
		430E98641930109E0078F430 /* INPredicateToSQLConverter.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2B7191C049A00EF660E /* INPredicateToSQLConverter.m */; };
		430E9865193010B30078F430 /* INContact.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2C5191C049A00EF660E /* INContact.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9866193010B30078F430 /* INTag.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2C7191C049A00EF660E /* INTag.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9867193010B30078F430 /* INMessage.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2C9191C049A00EF660E /* INMessage.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9868193010B30078F430 /* INDraft.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A14746192E75B7001AF02F /* INDraft.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9869193010B30078F430 /* INAttachment.h in Headers */ = {isa = PBXBuildFile; fileRef = 43ADEA04192D58160048272B /* INAttachment.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986A193010B30078F430 /* INNamespace.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2CB191C049A00EF660E /* INNamespace.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986B193010B30078F430 /* INThread.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2CD191C049A00EF660E /* INThread.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986C193010B30078F430 /* INThread+Private.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1474A192E7E1E001AF02F /* INThread+Private.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986D193010C60078F430 /* INModelObject.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2D3191C049A00EF660E /* INModelObject.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986E193010C60078F430 /* INModelProvider.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2D6191C049A00EF660E /* INModelProvider.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E986F193010C60078F430 /* INMessageProvider.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2CF191C049A00EF660E /* INMessageProvider.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9870193010C60078F430 /* INThreadProvider.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2D8191C049A00EF660E /* INThreadProvider.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9871193011140078F430 /* INDeleteDraftTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BEA1B192BC8CC00E5C67D /* INDeleteDraftTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9872193011140078F430 /* INAddRemoveTagsTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 435764F319269E2B00E6B340 /* INAddRemoveTagsTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9873193011140078F430 /* INUploadAttachmentTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 43ADE9FC192D56A30048272B /* INUploadAttachmentTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9874193011140078F430 /* INArchiveThreadTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BEA23192C364100E5C67D /* INArchiveThreadTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9875193011140078F430 /* INUnarchiveThreadTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A14742192C447A001AF02F /* INUnarchiveThreadTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		430E9876193011140078F430 /* INSendDraftTask.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BEA1F192C35C900E5C67D /* INSendDraftTask.h */; settings = {ATTRIBUTES = (Public, ); }; };
		438BF419193435A800544E6A /* INPDKeychainBindings.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BF415193435A800544E6A /* INPDKeychainBindings.h */; };
		438BF41A193435A800544E6A /* INPDKeychainBindings.m in Sources */ = {isa = PBXBuildFile; fileRef = 438BF416193435A800544E6A /* INPDKeychainBindings.m */; };
		438BF41B193435A800544E6A /* INPDKeychainBindingsController.h in Headers */ = {isa = PBXBuildFile; fileRef = 438BF417193435A800544E6A /* INPDKeychainBindingsController.h */; };
		438BF41C193435A800544E6A /* INPDKeychainBindingsController.m in Sources */ = {isa = PBXBuildFile; fileRef = 438BF418193435A800544E6A /* INPDKeychainBindingsController.m */; };
		4391ABC61930138E000C337F /* INModelResponseSerializer.h in Headers */ = {isa = PBXBuildFile; fileRef = 43A1E2B2191C049A00EF660E /* INModelResponseSerializer.h */; settings = {ATTRIBUTES = (Public, ); }; };
		4391ABC719301417000C337F /* INThreadProvider.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E2D9191C049A00EF660E /* INThreadProvider.m */; };
		43A1E28A191C02A800EF660E /* XCTest.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 43FF123C191AF2E70043E2E6 /* XCTest.framework */; };
		43A1E28B191C02A800EF660E /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 43FF122E191AF2E70043E2E6 /* Foundation.framework */; };
		43A1E28D191C02A800EF660E /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 43A1E28C191C02A800EF660E /* UIKit.framework */; };
		43A1E315191C04A000EF660E /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 43A1E310191C04A000EF660E /* InfoPlist.strings */; };
		43A1E318191C04A000EF660E /* INModelProviderTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 43A1E314191C04A000EF660E /* INModelProviderTests.m */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		11594C80534A4232B023C8B4 /* Pods.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = Pods.xcconfig; path = Pods/Pods.xcconfig; sourceTree = "<group>"; };
		1D6AA3EAE06C40EDB2393D2E /* libPods.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libPods.a; sourceTree = BUILT_PRODUCTS_DIR; };
		430E982F1930101E0078F430 /* Inbox.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = Inbox.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		430E98331930101F0078F430 /* Inbox-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "Inbox-Info.plist"; sourceTree = "<group>"; };
		430E98351930101F0078F430 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		430E98371930101F0078F430 /* Inbox-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Inbox-Prefix.pch"; sourceTree = "<group>"; };
		430E98381930101F0078F430 /* Inbox.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Inbox.h; sourceTree = "<group>"; };
		435764F319269E2B00E6B340 /* INAddRemoveTagsTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INAddRemoveTagsTask.h; sourceTree = "<group>"; };
		435764F419269E2B00E6B340 /* INAddRemoveTagsTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INAddRemoveTagsTask.m; sourceTree = "<group>"; };
		435764F719269E3900E6B340 /* INSaveDraftTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INSaveDraftTask.h; sourceTree = "<group>"; };
		435764F819269E3900E6B340 /* INSaveDraftTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INSaveDraftTask.m; sourceTree = "<group>"; };
		438BE9FE1926C8A400E5C67D /* INSyncEngine.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INSyncEngine.h; sourceTree = "<group>"; };
		438BEA1B192BC8CC00E5C67D /* INDeleteDraftTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INDeleteDraftTask.h; sourceTree = "<group>"; };
		438BEA1C192BC8CC00E5C67D /* INDeleteDraftTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INDeleteDraftTask.m; sourceTree = "<group>"; };
		438BEA1F192C35C900E5C67D /* INSendDraftTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INSendDraftTask.h; sourceTree = "<group>"; };
		438BEA20192C35C900E5C67D /* INSendDraftTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INSendDraftTask.m; sourceTree = "<group>"; };
		438BEA23192C364100E5C67D /* INArchiveThreadTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INArchiveThreadTask.h; sourceTree = "<group>"; };
		438BEA24192C364100E5C67D /* INArchiveThreadTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INArchiveThreadTask.m; sourceTree = "<group>"; };
		438BF415193435A800544E6A /* INPDKeychainBindings.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INPDKeychainBindings.h; sourceTree = "<group>"; };
		438BF416193435A800544E6A /* INPDKeychainBindings.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INPDKeychainBindings.m; sourceTree = "<group>"; };
		438BF417193435A800544E6A /* INPDKeychainBindingsController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INPDKeychainBindingsController.h; sourceTree = "<group>"; };
		438BF418193435A800544E6A /* INPDKeychainBindingsController.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INPDKeychainBindingsController.m; sourceTree = "<group>"; };
		43A14742192C447A001AF02F /* INUnarchiveThreadTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INUnarchiveThreadTask.h; sourceTree = "<group>"; };
		43A14743192C447A001AF02F /* INUnarchiveThreadTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INUnarchiveThreadTask.m; sourceTree = "<group>"; };
		43A14746192E75B7001AF02F /* INDraft.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INDraft.h; sourceTree = "<group>"; };
		43A14747192E75B7001AF02F /* INDraft.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INDraft.m; sourceTree = "<group>"; };
		43A1474A192E7E1E001AF02F /* INThread+Private.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "INThread+Private.h"; sourceTree = "<group>"; };
		43A1474B192E7E1E001AF02F /* INThread+Private.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "INThread+Private.m"; sourceTree = "<group>"; };
		43A1E289191C02A800EF660E /* InboxTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = InboxTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		43A1E28C191C02A800EF660E /* UIKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UIKit.framework; path = System/Library/Frameworks/UIKit.framework; sourceTree = SDKROOT; };
		43A1E2A1191C049A00EF660E /* FMDatabase+INModelQueries.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "FMDatabase+INModelQueries.h"; sourceTree = "<group>"; };
		43A1E2A2191C049A00EF660E /* FMDatabase+INModelQueries.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "FMDatabase+INModelQueries.m"; sourceTree = "<group>"; };
		43A1E2A3191C049A00EF660E /* FMResultSet+INModelQueries.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "FMResultSet+INModelQueries.h"; sourceTree = "<group>"; };
		43A1E2A4191C049A00EF660E /* FMResultSet+INModelQueries.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "FMResultSet+INModelQueries.m"; sourceTree = "<group>"; };
		43A1E2A7191C049A00EF660E /* NSDictionary+FormatConversion.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSDictionary+FormatConversion.h"; sourceTree = "<group>"; };
		43A1E2A8191C049A00EF660E /* NSDictionary+FormatConversion.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSDictionary+FormatConversion.m"; sourceTree = "<group>"; };
		43A1E2A9191C049A00EF660E /* NSObject+AssociatedObjects.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSObject+AssociatedObjects.h"; sourceTree = "<group>"; };
		43A1E2AA191C049A00EF660E /* NSObject+AssociatedObjects.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSObject+AssociatedObjects.m"; sourceTree = "<group>"; };
		43A1E2AB191C049A00EF660E /* NSObject+Properties.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSObject+Properties.h"; sourceTree = "<group>"; };
		43A1E2AC191C049A00EF660E /* NSObject+Properties.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSObject+Properties.m"; sourceTree = "<group>"; };
		43A1E2AD191C049A00EF660E /* NSPredicate+Inspection.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSPredicate+Inspection.h"; sourceTree = "<group>"; };
		43A1E2AE191C049A00EF660E /* NSPredicate+Inspection.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSPredicate+Inspection.m"; sourceTree = "<group>"; };
		43A1E2AF191C049A00EF660E /* NSString+FormatConversion.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSString+FormatConversion.h"; sourceTree = "<group>"; };
		43A1E2B0191C049A00EF660E /* NSString+FormatConversion.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSString+FormatConversion.m"; sourceTree = "<group>"; };
		43A1E2B2191C049A00EF660E /* INModelResponseSerializer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INModelResponseSerializer.h; sourceTree = "<group>"; };
		43A1E2B3191C049A00EF660E /* INModelResponseSerializer.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INModelResponseSerializer.m; sourceTree = "<group>"; };
		43A1E2B4191C049A00EF660E /* INPredicateToQueryParamConverter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INPredicateToQueryParamConverter.h; sourceTree = "<group>"; };
		43A1E2B5191C049A00EF660E /* INPredicateToQueryParamConverter.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INPredicateToQueryParamConverter.m; sourceTree = "<group>"; };
		43A1E2B6191C049A00EF660E /* INPredicateToSQLConverter.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INPredicateToSQLConverter.h; sourceTree = "<group>"; };
		43A1E2B7191C049A00EF660E /* INPredicateToSQLConverter.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INPredicateToSQLConverter.m; sourceTree = "<group>"; };
		43A1E2B8191C049A00EF660E /* INAPIManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INAPIManager.h; sourceTree = "<group>"; };
		43A1E2B9191C049A00EF660E /* INAPIManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INAPIManager.m; sourceTree = "<group>"; };
		43A1E2BA191C049A00EF660E /* Inbox-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "Inbox-Info.plist"; sourceTree = "<group>"; };
		43A1E2BB191C049A00EF660E /* Inbox-Prefix.pch */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "Inbox-Prefix.pch"; sourceTree = "<group>"; };
		43A1E2BC191C049A00EF660E /* INDatabaseManager.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INDatabaseManager.h; sourceTree = "<group>"; };
		43A1E2BD191C049A00EF660E /* INDatabaseManager.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INDatabaseManager.m; sourceTree = "<group>"; };
		43A1E2C0191C049A00EF660E /* INAPITask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INAPITask.h; sourceTree = "<group>"; };
		43A1E2C1191C049A00EF660E /* INAPITask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INAPITask.m; sourceTree = "<group>"; };
		43A1E2C5191C049A00EF660E /* INContact.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INContact.h; sourceTree = "<group>"; };
		43A1E2C6191C049A00EF660E /* INContact.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INContact.m; sourceTree = "<group>"; };
		43A1E2C7191C049A00EF660E /* INTag.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INTag.h; sourceTree = "<group>"; };
		43A1E2C8191C049A00EF660E /* INTag.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INTag.m; sourceTree = "<group>"; };
		43A1E2C9191C049A00EF660E /* INMessage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INMessage.h; sourceTree = "<group>"; };
		43A1E2CA191C049A00EF660E /* INMessage.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INMessage.m; sourceTree = "<group>"; };
		43A1E2CB191C049A00EF660E /* INNamespace.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INNamespace.h; sourceTree = "<group>"; };
		43A1E2CC191C049A00EF660E /* INNamespace.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INNamespace.m; sourceTree = "<group>"; };
		43A1E2CD191C049A00EF660E /* INThread.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INThread.h; sourceTree = "<group>"; };
		43A1E2CE191C049A00EF660E /* INThread.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INThread.m; sourceTree = "<group>"; };
		43A1E2CF191C049A00EF660E /* INMessageProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INMessageProvider.h; sourceTree = "<group>"; };
		43A1E2D0191C049A00EF660E /* INMessageProvider.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INMessageProvider.m; sourceTree = "<group>"; };
		43A1E2D1191C049A00EF660E /* INModelObject+Uniquing.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "INModelObject+Uniquing.h"; sourceTree = "<group>"; };
		43A1E2D2191C049A00EF660E /* INModelObject+Uniquing.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "INModelObject+Uniquing.m"; sourceTree = "<group>"; };
		43A1E2D3191C049A00EF660E /* INModelObject.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INModelObject.h; sourceTree = "<group>"; };
		43A1E2D4191C049A00EF660E /* INModelObject.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INModelObject.m; sourceTree = "<group>"; };
		43A1E2D5191C049A00EF660E /* INModelProvider+Private.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "INModelProvider+Private.h"; sourceTree = "<group>"; };
		43A1E2D6191C049A00EF660E /* INModelProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INModelProvider.h; sourceTree = "<group>"; };
		43A1E2D7191C049A00EF660E /* INModelProvider.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INModelProvider.m; sourceTree = "<group>"; };
		43A1E2D8191C049A00EF660E /* INThreadProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INThreadProvider.h; sourceTree = "<group>"; };
		43A1E2D9191C049A00EF660E /* INThreadProvider.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INThreadProvider.m; sourceTree = "<group>"; };
		43A1E311191C04A000EF660E /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		43A1E312191C04A000EF660E /* InboxTests-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "InboxTests-Info.plist"; sourceTree = "<group>"; };
		43A1E314191C04A000EF660E /* INModelProviderTests.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INModelProviderTests.m; sourceTree = "<group>"; };
		43A9684C191C08F300F24844 /* Inbox.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = Inbox.h; sourceTree = "<group>"; };
		43ADE9FC192D56A30048272B /* INUploadAttachmentTask.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INUploadAttachmentTask.h; sourceTree = "<group>"; };
		43ADE9FD192D56A30048272B /* INUploadAttachmentTask.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INUploadAttachmentTask.m; sourceTree = "<group>"; };
		43ADEA04192D58160048272B /* INAttachment.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = INAttachment.h; sourceTree = "<group>"; };
		43ADEA05192D58160048272B /* INAttachment.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = INAttachment.m; sourceTree = "<group>"; };
		43FF122E191AF2E70043E2E6 /* Foundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Foundation.framework; path = System/Library/Frameworks/Foundation.framework; sourceTree = SDKROOT; };
		43FF123C191AF2E70043E2E6 /* XCTest.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = XCTest.framework; path = Library/Frameworks/XCTest.framework; sourceTree = DEVELOPER_DIR; };
		6934FC4E75994D9D989C3502 /* Pods-InboxTests.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-InboxTests.xcconfig"; path = "Pods/Pods-InboxTests.xcconfig"; sourceTree = "<group>"; };
		6FC5C0E723F64C9CBF7CB02E /* libPods-InboxTests.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = "libPods-InboxTests.a"; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		430E982A1930101E0078F430 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				430E98301930101E0078F430 /* Foundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		43A1E286191C02A800EF660E /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				43A1E28A191C02A800EF660E /* XCTest.framework in Frameworks */,
				43A1E28D191C02A800EF660E /* UIKit.framework in Frameworks */,
				43A1E28B191C02A800EF660E /* Foundation.framework in Frameworks */,
				2B1BB2A864104F519B880280 /* libPods.a in Frameworks */,
				3C5C8D7CD9254C4A8A59C2A1 /* libPods-InboxTests.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		430E98311930101E0078F430 /* Inbox */ = {
			isa = PBXGroup;
			children = (
				430E98381930101F0078F430 /* Inbox.h */,
				430E98321930101F0078F430 /* Supporting Files */,
			);
			path = Inbox;
			sourceTree = "<group>";
		};
		430E98321930101F0078F430 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				430E98331930101F0078F430 /* Inbox-Info.plist */,
				430E98341930101F0078F430 /* InfoPlist.strings */,
				430E98371930101F0078F430 /* Inbox-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		438BF413193435A800544E6A /* Vendor */ = {
			isa = PBXGroup;
			children = (
				438BF414193435A800544E6A /* PDKeychainBindings */,
			);
			path = Vendor;
			sourceTree = "<group>";
		};
		438BF414193435A800544E6A /* PDKeychainBindings */ = {
			isa = PBXGroup;
			children = (
				438BF415193435A800544E6A /* INPDKeychainBindings.h */,
				438BF416193435A800544E6A /* INPDKeychainBindings.m */,
				438BF417193435A800544E6A /* INPDKeychainBindingsController.h */,
				438BF418193435A800544E6A /* INPDKeychainBindingsController.m */,
			);
			path = PDKeychainBindings;
			sourceTree = "<group>";
		};
		43A1E29F191C049A00EF660E /* Inbox */ = {
			isa = PBXGroup;
			children = (
				43A9684C191C08F300F24844 /* Inbox.h */,
				43A1E2B8191C049A00EF660E /* INAPIManager.h */,
				43A1E2B9191C049A00EF660E /* INAPIManager.m */,
				43A1E2BC191C049A00EF660E /* INDatabaseManager.h */,
				43A1E2BD191C049A00EF660E /* INDatabaseManager.m */,
				438BE9FE1926C8A400E5C67D /* INSyncEngine.h */,
				43A1E2BE191C049A00EF660E /* Models */,
				43A1E2A0191C049A00EF660E /* Categories */,
				43A1E2B1191C049A00EF660E /* Helpers */,
				438BF413193435A800544E6A /* Vendor */,
				43A1E2BA191C049A00EF660E /* Inbox-Info.plist */,
				43A1E2BB191C049A00EF660E /* Inbox-Prefix.pch */,
			);
			path = Inbox;
			sourceTree = "<group>";
		};
		43A1E2A0191C049A00EF660E /* Categories */ = {
			isa = PBXGroup;
			children = (
				43A1E2A1191C049A00EF660E /* FMDatabase+INModelQueries.h */,
				43A1E2A2191C049A00EF660E /* FMDatabase+INModelQueries.m */,
				43A1E2A3191C049A00EF660E /* FMResultSet+INModelQueries.h */,
				43A1E2A4191C049A00EF660E /* FMResultSet+INModelQueries.m */,
				43A1E2A7191C049A00EF660E /* NSDictionary+FormatConversion.h */,
				43A1E2A8191C049A00EF660E /* NSDictionary+FormatConversion.m */,
				43A1E2A9191C049A00EF660E /* NSObject+AssociatedObjects.h */,
				43A1E2AA191C049A00EF660E /* NSObject+AssociatedObjects.m */,
				43A1E2AB191C049A00EF660E /* NSObject+Properties.h */,
				43A1E2AC191C049A00EF660E /* NSObject+Properties.m */,
				43A1E2AD191C049A00EF660E /* NSPredicate+Inspection.h */,
				43A1E2AE191C049A00EF660E /* NSPredicate+Inspection.m */,
				43A1E2AF191C049A00EF660E /* NSString+FormatConversion.h */,
				43A1E2B0191C049A00EF660E /* NSString+FormatConversion.m */,
			);
			path = Categories;
			sourceTree = "<group>";
		};
		43A1E2B1191C049A00EF660E /* Helpers */ = {
			isa = PBXGroup;
			children = (
				43A1E2B2191C049A00EF660E /* INModelResponseSerializer.h */,
				43A1E2B3191C049A00EF660E /* INModelResponseSerializer.m */,
				43A1E2B4191C049A00EF660E /* INPredicateToQueryParamConverter.h */,
				43A1E2B5191C049A00EF660E /* INPredicateToQueryParamConverter.m */,
				43A1E2B6191C049A00EF660E /* INPredicateToSQLConverter.h */,
				43A1E2B7191C049A00EF660E /* INPredicateToSQLConverter.m */,
			);
			path = Helpers;
			sourceTree = "<group>";
		};
		43A1E2BE191C049A00EF660E /* Models */ = {
			isa = PBXGroup;
			children = (
				43A1E2BF191C049A00EF660E /* API Calls */,
				43A1E2D3191C049A00EF660E /* INModelObject.h */,
				43A1E2D4191C049A00EF660E /* INModelObject.m */,
				43A1E2D1191C049A00EF660E /* INModelObject+Uniquing.h */,
				43A1E2D2191C049A00EF660E /* INModelObject+Uniquing.m */,
				43A1E2D6191C049A00EF660E /* INModelProvider.h */,
				43A1E2D5191C049A00EF660E /* INModelProvider+Private.h */,
				43A1E2D7191C049A00EF660E /* INModelProvider.m */,
				43A1E2CF191C049A00EF660E /* INMessageProvider.h */,
				43A1E2D0191C049A00EF660E /* INMessageProvider.m */,
				43A1E2D8191C049A00EF660E /* INThreadProvider.h */,
				43A1E2D9191C049A00EF660E /* INThreadProvider.m */,
				43A1E2C2191C049A00EF660E /* Concrete Classes */,
			);
			path = Models;
			sourceTree = "<group>";
		};
		43A1E2BF191C049A00EF660E /* API Calls */ = {
			isa = PBXGroup;
			children = (
				43A1E2C0191C049A00EF660E /* INAPITask.h */,
				43A1E2C1191C049A00EF660E /* INAPITask.m */,
				435764F719269E3900E6B340 /* INSaveDraftTask.h */,
				435764F819269E3900E6B340 /* INSaveDraftTask.m */,
				438BEA1B192BC8CC00E5C67D /* INDeleteDraftTask.h */,
				438BEA1C192BC8CC00E5C67D /* INDeleteDraftTask.m */,
				435764F319269E2B00E6B340 /* INAddRemoveTagsTask.h */,
				435764F419269E2B00E6B340 /* INAddRemoveTagsTask.m */,
				43ADE9FC192D56A30048272B /* INUploadAttachmentTask.h */,
				43ADE9FD192D56A30048272B /* INUploadAttachmentTask.m */,
				438BEA23192C364100E5C67D /* INArchiveThreadTask.h */,
				438BEA24192C364100E5C67D /* INArchiveThreadTask.m */,
				43A14742192C447A001AF02F /* INUnarchiveThreadTask.h */,
				43A14743192C447A001AF02F /* INUnarchiveThreadTask.m */,
				438BEA1F192C35C900E5C67D /* INSendDraftTask.h */,
				438BEA20192C35C900E5C67D /* INSendDraftTask.m */,
			);
			path = "API Calls";
			sourceTree = "<group>";
		};
		43A1E2C2191C049A00EF660E /* Concrete Classes */ = {
			isa = PBXGroup;
			children = (
				43A1E2C5191C049A00EF660E /* INContact.h */,
				43A1E2C6191C049A00EF660E /* INContact.m */,
				43A1E2C7191C049A00EF660E /* INTag.h */,
				43A1E2C8191C049A00EF660E /* INTag.m */,
				43A1E2C9191C049A00EF660E /* INMessage.h */,
				43A1E2CA191C049A00EF660E /* INMessage.m */,
				43A14746192E75B7001AF02F /* INDraft.h */,
				43A14747192E75B7001AF02F /* INDraft.m */,
				43ADEA04192D58160048272B /* INAttachment.h */,
				43ADEA05192D58160048272B /* INAttachment.m */,
				43A1E2CB191C049A00EF660E /* INNamespace.h */,
				43A1E2CC191C049A00EF660E /* INNamespace.m */,
				43A1E2CD191C049A00EF660E /* INThread.h */,
				43A1E2CE191C049A00EF660E /* INThread.m */,
				43A1474A192E7E1E001AF02F /* INThread+Private.h */,
				43A1474B192E7E1E001AF02F /* INThread+Private.m */,
			);
			path = "Concrete Classes";
			sourceTree = "<group>";
		};
		43A1E30F191C04A000EF660E /* InboxTests */ = {
			isa = PBXGroup;
			children = (
				43A1E310191C04A000EF660E /* InfoPlist.strings */,
				43A1E312191C04A000EF660E /* InboxTests-Info.plist */,
				43A1E314191C04A000EF660E /* INModelProviderTests.m */,
			);
			path = InboxTests;
			sourceTree = "<group>";
		};
		43FF1222191AF2E70043E2E6 = {
			isa = PBXGroup;
			children = (
				43A1E29F191C049A00EF660E /* Inbox */,
				43A1E30F191C04A000EF660E /* InboxTests */,
				430E98311930101E0078F430 /* Inbox */,
				43FF122D191AF2E70043E2E6 /* Frameworks */,
				43FF122C191AF2E70043E2E6 /* Products */,
				11594C80534A4232B023C8B4 /* Pods.xcconfig */,
				6934FC4E75994D9D989C3502 /* Pods-InboxTests.xcconfig */,
			);
			sourceTree = "<group>";
		};
		43FF122C191AF2E70043E2E6 /* Products */ = {
			isa = PBXGroup;
			children = (
				43A1E289191C02A800EF660E /* InboxTests.xctest */,
				430E982F1930101E0078F430 /* Inbox.framework */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		43FF122D191AF2E70043E2E6 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				43FF122E191AF2E70043E2E6 /* Foundation.framework */,
				43FF123C191AF2E70043E2E6 /* XCTest.framework */,
				43A1E28C191C02A800EF660E /* UIKit.framework */,
				1D6AA3EAE06C40EDB2393D2E /* libPods.a */,
				6FC5C0E723F64C9CBF7CB02E /* libPods-InboxTests.a */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		430E982B1930101E0078F430 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				4391ABC61930138E000C337F /* INModelResponseSerializer.h in Headers */,
				430E9871193011140078F430 /* INDeleteDraftTask.h in Headers */,
				430E9866193010B30078F430 /* INTag.h in Headers */,
				430E9873193011140078F430 /* INUploadAttachmentTask.h in Headers */,
				430E9868193010B30078F430 /* INDraft.h in Headers */,
				430E9876193011140078F430 /* INSendDraftTask.h in Headers */,
				430E9865193010B30078F430 /* INContact.h in Headers */,
				430E9874193011140078F430 /* INArchiveThreadTask.h in Headers */,
				430E986A193010B30078F430 /* INNamespace.h in Headers */,
				430E983E193010450078F430 /* Inbox.h in Headers */,
				430E986F193010C60078F430 /* INMessageProvider.h in Headers */,
				430E9872193011140078F430 /* INAddRemoveTagsTask.h in Headers */,
				438BF419193435A800544E6A /* INPDKeychainBindings.h in Headers */,
				430E986B193010B30078F430 /* INThread.h in Headers */,
				430E9867193010B30078F430 /* INMessage.h in Headers */,
				430E986C193010B30078F430 /* INThread+Private.h in Headers */,
				430E983F193010520078F430 /* INAPIManager.h in Headers */,
				430E9840193010540078F430 /* INDatabaseManager.h in Headers */,
				430E9875193011140078F430 /* INUnarchiveThreadTask.h in Headers */,
				430E986E193010C60078F430 /* INModelProvider.h in Headers */,
				430E9870193010C60078F430 /* INThreadProvider.h in Headers */,
				438BF41B193435A800544E6A /* INPDKeychainBindingsController.h in Headers */,
				430E9869193010B30078F430 /* INAttachment.h in Headers */,
				430E986D193010C60078F430 /* INModelObject.h in Headers */,
				430E9841193010560078F430 /* INSyncEngine.h in Headers */,
				430E9842193010580078F430 /* INAPITask.h in Headers */,
				430E98431930105A0078F430 /* INSaveDraftTask.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		430E982E1930101E0078F430 /* Inbox */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 430E983B1930101F0078F430 /* Build configuration list for PBXNativeTarget "Inbox" */;
			buildPhases = (
				430E98291930101E0078F430 /* Sources */,
				430E982A1930101E0078F430 /* Frameworks */,
				430E982B1930101E0078F430 /* Headers */,
				430E982C1930101E0078F430 /* Resources */,
				430E982D1930101E0078F430 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Inbox;
			productName = Inbox;
			productReference = 430E982F1930101E0078F430 /* Inbox.framework */;
			productType = "com.apple.product-type.framework.static";
		};
		43A1E288191C02A800EF660E /* InboxTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 43A1E29C191C02A800EF660E /* Build configuration list for PBXNativeTarget "InboxTests" */;
			buildPhases = (
				6209A2F1CBD948FC9538C709 /* Check Pods Manifest.lock */,
				43A1E285191C02A800EF660E /* Sources */,
				43A1E286191C02A800EF660E /* Frameworks */,
				43A1E287191C02A800EF660E /* Resources */,
				77255DA01A164CB29F97112D /* Copy Pods Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = InboxTests;
			productName = InboxTests;
			productReference = 43A1E289191C02A800EF660E /* InboxTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		43FF1223191AF2E70043E2E6 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0510;
				ORGANIZATIONNAME = Inbox;
				TargetAttributes = {
					43A1E288191C02A800EF660E = {
						TestTargetID = 430E982E1930101E0078F430;
					};
				};
			};
			buildConfigurationList = 43FF1226191AF2E70043E2E6 /* Build configuration list for PBXProject "InboxFramework" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = 43FF1222191AF2E70043E2E6;
			productRefGroup = 43FF122C191AF2E70043E2E6 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				430E982E1930101E0078F430 /* Inbox */,
				43A1E288191C02A800EF660E /* InboxTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		430E982C1930101E0078F430 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				430E98361930101F0078F430 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		43A1E287191C02A800EF660E /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				43A1E315191C04A000EF660E /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		430E982D1930101E0078F430 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
			showEnvVarsInLog = 0;
		};
		6209A2F1CBD948FC9538C709 /* Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Check Pods Manifest.lock";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_ROOT}/../Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [[ $? != 0 ]] ; then\n    cat << EOM\nerror: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\nEOM\n    exit 1\nfi\n";
			showEnvVarsInLog = 0;
		};
		77255DA01A164CB29F97112D /* Copy Pods Resources */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Copy Pods Resources";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${SRCROOT}/Pods/Pods-InboxTests-resources.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		430E98291930101E0078F430 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				430E9846193010600078F430 /* INAPITask.m in Sources */,
				430E98441930105C0078F430 /* INAPIManager.m in Sources */,
				430E9854193010890078F430 /* INTag.m in Sources */,
				430E984A193010730078F430 /* INAddRemoveTagsTask.m in Sources */,
				430E9853193010880078F430 /* INContact.m in Sources */,
				430E98551930108A0078F430 /* INMessage.m in Sources */,
				430E98561930108B0078F430 /* INDraft.m in Sources */,
				430E98571930108C0078F430 /* INAttachment.m in Sources */,
				430E98621930109D0078F430 /* INModelResponseSerializer.m in Sources */,
				430E984D1930107D0078F430 /* INUnarchiveThreadTask.m in Sources */,
				430E985A193010930078F430 /* INThread+Private.m in Sources */,
				430E98631930109E0078F430 /* INPredicateToQueryParamConverter.m in Sources */,
				430E98641930109E0078F430 /* INPredicateToSQLConverter.m in Sources */,
				430E984B193010740078F430 /* INUploadAttachmentTask.m in Sources */,
				430E98591930108E0078F430 /* INThread.m in Sources */,
				438BF41A193435A800544E6A /* INPDKeychainBindings.m in Sources */,
				430E985B193010950078F430 /* FMDatabase+INModelQueries.m in Sources */,
				430E984F1930107F0078F430 /* INModelObject.m in Sources */,
				430E985D193010970078F430 /* NSDictionary+FormatConversion.m in Sources */,
				430E98581930108D0078F430 /* INNamespace.m in Sources */,
				430E98601930109A0078F430 /* NSPredicate+Inspection.m in Sources */,
				430E985E193010980078F430 /* NSObject+AssociatedObjects.m in Sources */,
				430E985F193010990078F430 /* NSObject+Properties.m in Sources */,
				430E985C193010960078F430 /* FMResultSet+INModelQueries.m in Sources */,
				430E98611930109B0078F430 /* NSString+FormatConversion.m in Sources */,
				430E9852193010860078F430 /* INMessageProvider.m in Sources */,
				4391ABC719301417000C337F /* INThreadProvider.m in Sources */,
				430E984E1930107E0078F430 /* INSendDraftTask.m in Sources */,
				430E984C193010750078F430 /* INArchiveThreadTask.m in Sources */,
				430E9850193010810078F430 /* INModelObject+Uniquing.m in Sources */,
				430E9851193010850078F430 /* INModelProvider.m in Sources */,
				430E9847193010620078F430 /* INSaveDraftTask.m in Sources */,
				430E9848193010640078F430 /* INDeleteDraftTask.m in Sources */,
				438BF41C193435A800544E6A /* INPDKeychainBindingsController.m in Sources */,
				430E98451930105E0078F430 /* INDatabaseManager.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		43A1E285191C02A800EF660E /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				43A1E318191C04A000EF660E /* INModelProviderTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		430E98341930101F0078F430 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				430E98351930101F0078F430 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		43A1E310191C04A000EF660E /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				43A1E311191C04A000EF660E /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		430E983C1930101F0078F430 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 11594C80534A4232B023C8B4 /* Pods.xcconfig */;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD)";
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Inbox/Inbox-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "Inbox/Inbox-Info.plist";
				OTHER_LDFLAGS = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		430E983D1930101F0078F430 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 11594C80534A4232B023C8B4 /* Pods.xcconfig */;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD)";
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Inbox/Inbox-Prefix.pch";
				INFOPLIST_FILE = "Inbox/Inbox-Info.plist";
				OTHER_LDFLAGS = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		43A1E29D191C02A800EF660E /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 6934FC4E75994D9D989C3502 /* Pods-InboxTests.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/Inbox.framework/Versions/A/Inbox";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Inbox/Inbox-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "InboxTests/InboxTests-Info.plist";
				LIBRARY_SEARCH_PATHS = (
					"$(inherited)",
					"$(PROJECT_DIR)/Pods/build/Debug-iphoneos",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				UFW_FAKE_FRAMEWORK_NAME = Inbox;
				WRAPPER_EXTENSION = xctest;
			};
			name = Debug;
		};
		43A1E29E191C02A800EF660E /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 6934FC4E75994D9D989C3502 /* Pods-InboxTests.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/Inbox.framework/Versions/A/Inbox";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "Inbox/Inbox-Prefix.pch";
				INFOPLIST_FILE = "InboxTests/InboxTests-Info.plist";
				LIBRARY_SEARCH_PATHS = (
					"$(inherited)",
					"$(PROJECT_DIR)/Pods/build/Debug-iphoneos",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				UFW_FAKE_FRAMEWORK_NAME = Inbox;
				WRAPPER_EXTENSION = xctest;
			};
			name = Release;
		};
		43FF124C191AF2E70043E2E6 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 7.1;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				VALID_ARCHS = "arm64 armv7 armv7s i386";
			};
			name = Debug;
		};
		43FF124D191AF2E70043E2E6 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 7.1;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
				VALID_ARCHS = "arm64 armv7 armv7s i386";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		430E983B1930101F0078F430 /* Build configuration list for PBXNativeTarget "Inbox" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				430E983C1930101F0078F430 /* Debug */,
				430E983D1930101F0078F430 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		43A1E29C191C02A800EF660E /* Build configuration list for PBXNativeTarget "InboxTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				43A1E29D191C02A800EF660E /* Debug */,
				43A1E29E191C02A800EF660E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		43FF1226191AF2E70043E2E6 /* Build configuration list for PBXProject "InboxFramework" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				43FF124C191AF2E70043E2E6 /* Debug */,
				43FF124D191AF2E70043E2E6 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 43FF1223191AF2E70043E2E6 /* Project object */;
}
